#include <iostream>
#include <cstring>
#include <iomanip>
#include <immintrin.h>
#include <chrono>
using namespace std;
using namespace std::chrono;

const uint8_t SBOX[256] = {
    0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05,
    0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99,
    0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62,
    0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6,
    0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8,
    0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35,
    0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87,
    0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e,
    0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1,
    0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3,
    0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f,
    0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51,
    0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8,
    0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0,
    0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84,
    0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48
};

const uint32_t FK[4] = {
    0xA3B1BAC6, 0x56AA3350, 0x677D9197, 0xB27022DC
};

const uint32_t CK[32] = {
    0x00070E15, 0x1C232A31, 0x383F464D, 0x545B6269,
    0x70777E85, 0x8C939AA1, 0xA8AFB6BD, 0xC4CBD2D9,
    0xE0E7EEF5, 0xFC030A11, 0x181F262D, 0x343B4249,
    0x50575E65, 0x6C737A81, 0x888F969D, 0xA4ABB2B9,
    0xC0C7CED5, 0xDCE3EAF1, 0xF8FF060D, 0x141B2229,
    0x30373E45, 0x4C535A61, 0x686F767D, 0x848B9299,
    0xA0A7AEB5, 0xBCC3CAD1, 0xD8DFE6ED, 0xF4FB0209,
    0x10171E25, 0x2C333A41, 0x484F565D, 0x646B7279
};

uint32_t divide(uint8_t x0, uint8_t x1, uint8_t x2, uint8_t x3) {
    return (x0 << 24) + (x1 << 16) + (x2 << 8) + x3;
}

uint32_t tau(uint32_t x) {
    return (SBOX[(x >> 24) & 0xFF] << 24) +
        (SBOX[(x >> 16) & 0xFF] << 16) +
        (SBOX[(x >> 8) & 0xFF] << 8) +
        SBOX[x & 0xFF];
}

uint32_t rotl32(uint32_t x, uint8_t n) {
    return (x << n) + (x >> (32 - n));
}

uint32_t L_transform0(uint32_t x) {
    return x + rotl32(x, 2) + rotl32(x, 10) + rotl32(x, 18) + rotl32(x, 24);
}

uint32_t L_transform1(uint32_t x) {
    return x + rotl32(x, 13) + rotl32(x, 23);
}

uint32_t genRoundKey(uint8_t i, uint32_t* key) {
    return key[i] + L_transform1(tau(key[i + 1] + key[i + 2] + key[i + 3] + CK[i]));
}

//AESNI优化的SM4的S盒变换
__m128i SM4_SBox_AESNI(__m128i x) {
    //同构映射矩阵TA的查找表
    const __m128i TA_HIGH = _mm_set_epi8(
        0x22, 0x58, 0x1a, 0x60, 0x02, 0x78, 0x3a, 0x40,
        0x5a, 0x20, 0x42, 0x38, 0x7a, 0x00, 0x00, 0x00);
    const __m128i TA_LOW = _mm_set_epi8(
        0xe2, 0x28, 0x95, 0x5f, 0x69, 0xa3, 0x1e, 0xd4,
        0x41, 0x8b, 0xbd, 0x77, 0xc3, 0x00, 0x00, 0x00);

    //同构映射矩阵ATA的查找表
    const __m128i ATA_HIGH = _mm_set_epi8(
        0x14, 0x07, 0xc6, 0xd5, 0x6c, 0x7f, 0xbe, 0xad,
        0x6b, 0x78, 0xc1, 0xd2, 0x13, 0x00, 0x00, 0x00);
    const __m128i ATA_LOW = _mm_set_epi8(
        0xd8, 0xb8, 0xfa, 0x9a, 0xc5, 0xa5, 0xe7, 0x87,
        0x7d, 0x5d, 0x9f, 0xbb, 0x60, 0x00, 0x00, 0x00);

    //常数向量
    const __m128i TC = _mm_set1_epi8(0b00100011);
    const __m128i ATAC = _mm_set1_epi8(0b00111011);

    //消除AESNI指令的行移位影响
    const __m128i MASK = _mm_set_epi8(
        0x03, 0x06, 0x09, 0x00, 0x06, 0x01, 0x04, 0x07,
        0x02, 0x05, 0x08, 0x0b, 0x0c, 0x0f, 0x0a, 0x0d);

    //矩阵乘法
    auto mul_matrix = [](__m128i x, __m128i high_mask, __m128i low_mask) {
        __m128i tmp1, tmp2;
        __m128i and_mask = _mm_set1_epi32(0x0f0f0f0f);

        tmp2 = _mm_srli_epi16(x, 4);
        tmp1 = _mm_and_si128(x, and_mask);
        tmp2 = _mm_and_si128(tmp2, and_mask);

        tmp1 = _mm_shuffle_epi8(low_mask, tmp1);
        tmp2 = _mm_shuffle_epi8(high_mask, tmp2);

        return _mm_xor_si128(tmp1, tmp2);
    };

    //SM4的S盒查表操作如下四步：
    //1. 逆行移位
    x = _mm_shuffle_epi8(x, MASK);

    //2. 应用TA矩阵并加TC
    x = _mm_xor_si128(mul_matrix(x, TA_HIGH, TA_LOW), TC);

    //3. 使用AESNI指令进行S盒变换(采用全0轮密钥）
    x = _mm_aesenclast_si128(x, _mm_setzero_si128());

    //4. 应用ATA矩阵并加ATAC
    x = _mm_xor_si128(mul_matrix(x, ATA_HIGH, ATA_LOW), ATAC);

    return x;
}

void sm4_aRound_AESNI(__m128i& x0, __m128i& x1, __m128i& x2, __m128i& x3, __m128i k) {
    __m128i temp = _mm_xor_si128(_mm_xor_si128(x1, x2), _mm_xor_si128(x3, k));
    temp = SM4_SBox_AESNI(temp);

    __m128i l0 = temp;
    __m128i l2 = _mm_xor_si128(_mm_slli_epi32(temp, 2), _mm_srli_epi32(temp, 30));
    __m128i l10 = _mm_xor_si128(_mm_slli_epi32(temp, 10), _mm_srli_epi32(temp, 22));
    __m128i l18 = _mm_xor_si128(_mm_slli_epi32(temp, 18), _mm_srli_epi32(temp, 14));
    __m128i l24 = _mm_xor_si128(_mm_slli_epi32(temp, 24), _mm_srli_epi32(temp, 8));

    temp = _mm_xor_si128(_mm_xor_si128(l0, l2), _mm_xor_si128(l10, _mm_xor_si128(l18, l24)));
    temp = _mm_xor_si128(x0, temp);
    x0 = x1;
    x1 = x2;
    x2 = x3;
    x3 = temp;
}

void sm4_encrypt_block_AESNI(uint32_t* key, uint8_t* plaintext, uint8_t* ciphertext) {
    uint32_t input[4];
    for (int j = 0; j < 4; j++) {
        input[j] = divide(plaintext[4 * j], plaintext[4 * j + 1], plaintext[4 * j + 2], plaintext[4 * j + 3]);
    }

    __m128i x0 = _mm_set1_epi32(input[0]);
    __m128i x1 = _mm_set1_epi32(input[1]);
    __m128i x2 = _mm_set1_epi32(input[2]);
    __m128i x3 = _mm_set1_epi32(input[3]);

    for (int i = 0; i < 32; i++) {
        __m128i k = _mm_set1_epi32(key[i + 4]);
        sm4_aRound_AESNI(x0, x1, x2, x3, k);
    }

    input[0] = _mm_extract_epi32(x3, 0);
    input[1] = _mm_extract_epi32(x2, 0);
    input[2] = _mm_extract_epi32(x1, 0);
    input[3] = _mm_extract_epi32(x0, 0);

    for (int j = 0; j < 4; j++) {
        ciphertext[4 * j] = (input[3 - j] >> 24) & 0xFF;
        ciphertext[4 * j + 1] = (input[3 - j] >> 16) & 0xFF;
        ciphertext[4 * j + 2] = (input[3 - j] >> 8) & 0xFF;
        ciphertext[4 * j + 3] = input[3 - j] & 0xFF;
    }
}

int main() {
    uint8_t init_key[16] = {
        0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
    };

    uint8_t plaintext[16] = {
        0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
    };

    uint8_t ciphertext[16];
    uint32_t key[36];

    for (int j = 0; j < 4; j++) {
        key[j] = divide(init_key[4 * j], init_key[4 * j + 1],
            init_key[4 * j + 2], init_key[4 * j + 3]) + FK[j];
    }

    for (int i = 0; i < 32; i++) {
        key[i + 4] = genRoundKey(i, key);
    }

    const int iterations = 1000;
    auto total_time = nanoseconds(0);

    sm4_encrypt_block_AESNI(key, plaintext, ciphertext);

    for (int i = 0; i < iterations; i++) {
        auto start = high_resolution_clock::now();
        sm4_encrypt_block_AESNI(key, plaintext, ciphertext);
        auto stop = high_resolution_clock::now();
        total_time += duration_cast<nanoseconds>(stop - start);
    }

    //cout << "Ciphertext: ";
    //for (int j = 0; j < 16; j++) {
        //cout << hex << setw(2) << setfill('0') << (int)ciphertext[j];
    //}
    //cout << endl;

    cout << "Average time over " << iterations << " iterations: "
        << total_time.count() / iterations << " nanoseconds" << endl;

    return 0;
}